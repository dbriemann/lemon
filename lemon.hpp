#ifndef BB_DEFINITIONS_HPP
#define BB_DEFINITIONS_HPP

#include <cstdlib>
using namespace std;


/*
 * Types
 */
typedef uint8_t U8; typedef int8_t I8;
typedef uint16_t U16; typedef int16_t I16;
typedef uint32_t U32; typedef int32_t I32;
typedef uint64_t U64; typedef int64_t I64;
typedef U8 Square;
//typedef I8 Offset;
#define C64(constantU64) constantU64##ULL
//#define iBitMask(i) (1ULL << (i))
#define iBitMask(i) (BOARDS_BY_INDEX[i])


/*
 * Boad & Piece definitions
 */
#define BOARD_SIZE                  8
#define MASK_COLOR                  0x8
#define MASK_PIECE                  0x7
#define FLIP(x) (((x)+1)&1)

#define NONE 0

enum Color {
    WHITE, BLACK
};

enum PieceType {
    PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING
};

enum OccupancyType {
    WPAWN, WKNIGHT, WBISHOP, WROOK, WQUEEN, WKING, EMPTY,
    BPAWN=8, BKNIGHT, BBISHOP, BROOK, BQUEEN, BKING
};


/*
 * Rank & file definitions
 */
#define FILE_A 0x0101010101010101ULL
#define FILE_B 0x0202020202020202ULL
#define FILE_C 0x0404040404040404ULL
#define FILE_D 0x0808080808080808ULL
#define FILE_E 0x1010101010101010ULL
#define FILE_F 0x2020202020202020ULL
#define FILE_G 0x4040404040404040ULL
#define FILE_H 0x8080808080808080ULL

#define RANK_1 0x00000000000000FFULL
#define RANK_2 0x000000000000FF00ULL
#define RANK_3 0x0000000000FF0000ULL
#define RANK_4 0x00000000FF000000ULL
#define RANK_5 0x000000FF00000000ULL
#define RANK_6 0x0000FF0000000000ULL
#define RANK_7 0x00FF000000000000ULL
#define RANK_8 0xFF00000000000000ULL

#define EP_RANKS 0x0000FF0000FF0000ULL


#define SQ(f,r) (((r) << 3) | (f))
#define FILE(sq) ((sq) &  7)
#define RANK(sq) ((sq) >> 3)

/*
 * Movement definitions
 */
/*
 *northwest    north   northeast
  NW             N            NE

          +7    +8    +9
              \  |  /
  W       -1 <-  0 -> +1       E
              /  |  \
          -9    -8    -7

  SW             S            SE
  southwest    south   southeast
 *
 */
#define _SHIFT_N(x) ((x) << 8)
#define _SHIFT_NN(x) ((x) << 16) //pawn double step
#define _SHIFT_S(x) ((x) >> 8)
#define _SHIFT_SS(x) ((x) >> 16) //pawn double step
#define _SHIFT_W(x) ((x) >> 1)
#define _SHIFT_E(x) ((x) << 1)
#define _SHIFT_NE(x) ((x) << 9)
#define _SHIFT_SE(x) ((x) >> 7)
#define _SHIFT_SW(x) ((x) >> 9)
#define _SHIFT_NW(x) ((x) << 7)
//knight's jumps
#define _SHIFT_NNE(x) ((x) << 17)
#define _SHIFT_NNW(x) ((x) << 15)
#define _SHIFT_SSE(x) ((x) >> 15)
#define _SHIFT_SSW(x) ((x) >> 17)
#define _SHIFT_WNW(x) ((x) << 6)
#define _SHIFT_WSW(x) ((x) >> 10)
#define _SHIFT_ENE(x) ((x) << 10)
#define _SHIFT_ESE(x) ((x) >> 6)

static const int PAWN_MOVE_DIRECTIONS[2] = {8, -8};
static const int PAWN_CAP_EAST_DIRECTIONS[2] = {9, -7};
static const int PAWN_CAP_WEST_DIRECTIONS[2] = {7, -9};

//TODO: should be faster.. but isn't...
//static const int PAWN_MOVE_DIRS_RELATIVE[2] = {8, 64-8};
//static const int PAWN_CAP_EAST_DIRS_RELATIVE[2] = {9, 64-7};
//static const int PAWN_CAP_WEST_DIRS_RELATIVE[2] = {7, 64-9};
//static const U64 PAWN_PROMOTION_MASKS[2] = {RANK_8, RANK_1};
//static const U64 PAWN_TWO_STEP_MASKS[2] = {RANK_3, RANK_6};
//inline U64 circular_left_shift(U64 target, int shift){
//    return target << shift | target >> (64-shift);
//}
//inline U64 circular_left_shift(uint64_t x, int s) {
//   char left  =   (char) s;
//   char right = -((char)(s >> 8) & left);
//   return (x >> right) << (right + left);
//}


/*
 * Movegen target tables
 */
#define MAGIC_DIAGONAL_C2H7 0x0080402010080400ULL

static const U64 KNIGHT_TARGET_BBS[64] = {
    0x20400ULL, 0x50800ULL, 0xA1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xA01000ULL, 0x402000ULL,
    0x2040004ULL, 0x5080008ULL, 0xA110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xA0100010ULL, 0x40200020ULL,
    0x204000402ULL, 0x508000805ULL, 0xA1100110AULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xA0100010A0ULL, 0x4020002040ULL,
    0x20400040200ULL, 0x50800080500ULL, 0xA1100110A00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xA0100010A000ULL, 0x402000204000ULL,
    0x2040004020000ULL, 0x5080008050000ULL, 0xA1100110A0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xA0100010A00000ULL, 0x40200020400000ULL,
    0x204000402000000ULL, 0x508000805000000ULL, 0xA1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL,
    0x400040200000000ULL, 0x800080500000000ULL, 0x1100110A00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010A000000000ULL, 0x2000204000000000ULL,
    0x4020000000000ULL, 0x8050000000000ULL, 0x110A0000000000ULL, 0x22140000000000ULL, 0x44280000000000ULL, 0x88500000000000ULL, 0x10A00000000000ULL, 0x20400000000000ULL
};

static const U64 KING_TARGET_BBS[64] = {
    0x302ULL, 0x705ULL, 0xE0AULL, 0x1C14ULL, 0x3828ULL, 0x7050ULL, 0xE0A0ULL, 0xC040ULL,
    0x30203ULL, 0x70507ULL, 0xE0A0EULL, 0x1C141CULL, 0x382838ULL, 0x705070ULL, 0xE0A0E0ULL, 0xC040C0ULL,
    0x3020300ULL, 0x7050700ULL, 0xE0A0E00ULL, 0x1C141C00ULL, 0x38283800ULL, 0x70507000ULL, 0xE0A0E000ULL, 0xC040C000ULL,
    0x302030000ULL, 0x705070000ULL, 0xE0A0E0000ULL, 0x1C141C0000ULL, 0x3828380000ULL, 0x7050700000ULL, 0xE0A0E00000ULL, 0xC040C00000ULL,
    0x30203000000ULL, 0x70507000000ULL, 0xE0A0E000000ULL, 0x1C141C000000ULL, 0x382838000000ULL, 0x705070000000ULL, 0xE0A0E0000000ULL, 0xC040C0000000ULL,
    0x3020300000000ULL, 0x7050700000000ULL, 0xE0A0E00000000ULL, 0x1C141C00000000ULL, 0x38283800000000ULL, 0x70507000000000ULL, 0xE0A0E000000000ULL, 0xC040C000000000ULL,
    0x302030000000000ULL, 0x705070000000000ULL, 0xE0A0E0000000000ULL, 0x1C141C0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xE0A0E00000000000ULL, 0xC040C00000000000ULL,
    0x203000000000000ULL, 0x507000000000000ULL, 0xA0E000000000000ULL, 0x141C000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xA0E0000000000000ULL, 0x40C0000000000000ULL
};

static const U64 A1H8_DIAGONAL_TARGET_BBS[64] = {
    0x8040201008040201, 0x80402010080402, 0x804020100804, 0x8040201008, 0x80402010, 0x804020, 0x8040, 0x80,
    0x4020100804020100, 0x8040201008040201, 0x80402010080402, 0x804020100804, 0x8040201008, 0x80402010, 0x804020, 0x8040,
    0x2010080402010000, 0x4020100804020100, 0x8040201008040201, 0x80402010080402, 0x804020100804, 0x8040201008, 0x80402010, 0x804020,
    0x1008040201000000, 0x2010080402010000, 0x4020100804020100, 0x8040201008040201, 0x80402010080402, 0x804020100804, 0x8040201008, 0x80402010,
    0x804020100000000, 0x1008040201000000, 0x2010080402010000, 0x4020100804020100, 0x8040201008040201, 0x80402010080402, 0x804020100804, 0x8040201008,
    0x402010000000000, 0x804020100000000, 0x1008040201000000, 0x2010080402010000, 0x4020100804020100, 0x8040201008040201, 0x80402010080402, 0x804020100804,
    0x201000000000000, 0x402010000000000, 0x804020100000000, 0x1008040201000000, 0x2010080402010000, 0x4020100804020100, 0x8040201008040201, 0x80402010080402,
    0x100000000000000, 0x201000000000000, 0x402010000000000, 0x804020100000000, 0x1008040201000000, 0x2010080402010000, 0x4020100804020100, 0x8040201008040201
};

static const U64 H1A8_DIAGONAL_TARGET_BBS[64] = {
    0x1, 0x102, 0x10204, 0x1020408, 0x102040810, 0x10204081020, 0x1020408102040, 0x102040810204080,
    0x102, 0x10204, 0x1020408, 0x102040810, 0x10204081020, 0x1020408102040, 0x102040810204080, 0x204081020408000,
    0x10204, 0x1020408, 0x102040810, 0x10204081020, 0x1020408102040, 0x102040810204080, 0x204081020408000, 0x408102040800000,
    0x1020408, 0x102040810, 0x10204081020, 0x1020408102040, 0x102040810204080, 0x204081020408000, 0x408102040800000, 0x810204080000000,
    0x102040810, 0x10204081020, 0x1020408102040, 0x102040810204080, 0x204081020408000, 0x408102040800000, 0x810204080000000, 0x1020408000000000,
    0x10204081020, 0x1020408102040, 0x102040810204080, 0x204081020408000, 0x408102040800000, 0x810204080000000, 0x1020408000000000, 0x2040800000000000,
    0x1020408102040, 0x102040810204080, 0x204081020408000, 0x408102040800000, 0x810204080000000, 0x1020408000000000, 0x2040800000000000, 0x4080000000000000,
    0x102040810204080, 0x204081020408000, 0x408102040800000, 0x810204080000000, 0x1020408000000000, 0x2040800000000000, 0x4080000000000000, 0x8000000000000000
};


static const U8 RANK_ATTACK_BBS[8][64] = {
    {0xFE, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x7E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2},
    {0xFD, 0xFD, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x1D, 0x1D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x3D, 0x3D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x1D, 0x1D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x7D, 0x7D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x1D, 0x1D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x3D, 0x3D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5, 0x1D, 0x1D, 0x5, 0x5, 0xD, 0xD, 0x5, 0x5},
    {0xFB, 0xFA, 0xFB, 0xFA, 0xB, 0xA, 0xB, 0xA, 0x1B, 0x1A, 0x1B, 0x1A, 0xB, 0xA, 0xB, 0xA, 0x3B, 0x3A, 0x3B, 0x3A, 0xB, 0xA, 0xB, 0xA, 0x1B, 0x1A, 0x1B, 0x1A, 0xB, 0xA, 0xB, 0xA, 0x7B, 0x7A, 0x7B, 0x7A, 0xB, 0xA, 0xB, 0xA, 0x1B, 0x1A, 0x1B, 0x1A, 0xB, 0xA, 0xB, 0xA, 0x3B, 0x3A, 0x3B, 0x3A, 0xB, 0xA, 0xB, 0xA, 0x1B, 0x1A, 0x1B, 0x1A, 0xB, 0xA, 0xB, 0xA},
    {0xF7, 0xF6, 0xF4, 0xF4, 0xF7, 0xF6, 0xF4, 0xF4, 0x17, 0x16, 0x14, 0x14, 0x17, 0x16, 0x14, 0x14, 0x37, 0x36, 0x34, 0x34, 0x37, 0x36, 0x34, 0x34, 0x17, 0x16, 0x14, 0x14, 0x17, 0x16, 0x14, 0x14, 0x77, 0x76, 0x74, 0x74, 0x77, 0x76, 0x74, 0x74, 0x17, 0x16, 0x14, 0x14, 0x17, 0x16, 0x14, 0x14, 0x37, 0x36, 0x34, 0x34, 0x37, 0x36, 0x34, 0x34, 0x17, 0x16, 0x14, 0x14, 0x17, 0x16, 0x14, 0x14},
    {0xEF, 0xEE, 0xEC, 0xEC, 0xE8, 0xE8, 0xE8, 0xE8, 0xEF, 0xEE, 0xEC, 0xEC, 0xE8, 0xE8, 0xE8, 0xE8, 0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28, 0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28, 0x6F, 0x6E, 0x6C, 0x6C, 0x68, 0x68, 0x68, 0x68, 0x6F, 0x6E, 0x6C, 0x6C, 0x68, 0x68, 0x68, 0x68, 0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28, 0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28},
    {0xDF, 0xDE, 0xDC, 0xDC, 0xD8, 0xD8, 0xD8, 0xD8, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xDF, 0xDE, 0xDC, 0xDC, 0xD8, 0xD8, 0xD8, 0xD8, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0x5F, 0x5E, 0x5C, 0x5C, 0x58, 0x58, 0x58, 0x58, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x5F, 0x5E, 0x5C, 0x5C, 0x58, 0x58, 0x58, 0x58, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50},
    {0xBF, 0xBE, 0xBC, 0xBC, 0xB8, 0xB8, 0xB8, 0xB8, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xBF, 0xBE, 0xBC, 0xBC, 0xB8, 0xB8, 0xB8, 0xB8, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0},
    {0x7F, 0x7E, 0x7C, 0x7C, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}
};

static const U64 FILE_ATTACK_BBS[8][64] = {
    {0x101010101010100, 0x1010101010100, 0x10101010100, 0x10101010100, 0x101010100, 0x101010100, 0x101010100, 0x101010100, 0x1010100, 0x1010100, 0x1010100, 0x1010100, 0x1010100, 0x1010100, 0x1010100, 0x1010100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x10100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100},
    {0x101010101010001, 0x1010101010001, 0x10101010001, 0x10101010001, 0x101010001, 0x101010001, 0x101010001, 0x101010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x101010101010001, 0x1010101010001, 0x10101010001, 0x10101010001, 0x101010001, 0x101010001, 0x101010001, 0x101010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x1010001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001, 0x10001},
    {0x101010101000101, 0x1010101000101, 0x10101000101, 0x10101000101, 0x101000101, 0x101000101, 0x101000101, 0x101000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x101010101000101, 0x1010101000101, 0x10101000101, 0x10101000101, 0x101000101, 0x101000101, 0x101000101, 0x101000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x1000101, 0x101010101000100, 0x1010101000100, 0x10101000100, 0x10101000100, 0x101000100, 0x101000100, 0x101000100, 0x101000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x101010101000100, 0x1010101000100, 0x10101000100, 0x10101000100, 0x101000100, 0x101000100, 0x101000100, 0x101000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100, 0x1000100},
    {0x101010100010101, 0x1010100010101, 0x10100010101, 0x10100010101, 0x100010101, 0x100010101, 0x100010101, 0x100010101, 0x101010100010101, 0x1010100010101, 0x10100010101, 0x10100010101, 0x100010101, 0x100010101, 0x100010101, 0x100010101, 0x101010100010000, 0x1010100010000, 0x10100010000, 0x10100010000, 0x100010000, 0x100010000, 0x100010000, 0x100010000, 0x101010100010000, 0x1010100010000, 0x10100010000, 0x10100010000, 0x100010000, 0x100010000, 0x100010000, 0x100010000, 0x101010100010100, 0x1010100010100, 0x10100010100, 0x10100010100, 0x100010100, 0x100010100, 0x100010100, 0x100010100, 0x101010100010100, 0x1010100010100, 0x10100010100, 0x10100010100, 0x100010100, 0x100010100, 0x100010100, 0x100010100, 0x101010100010000, 0x1010100010000, 0x10100010000, 0x10100010000, 0x100010000, 0x100010000, 0x100010000, 0x100010000, 0x101010100010000, 0x1010100010000, 0x10100010000, 0x10100010000, 0x100010000, 0x100010000, 0x100010000, 0x100010000},
    {0x101010001010101, 0x1010001010101, 0x10001010101, 0x10001010101, 0x101010001010101, 0x1010001010101, 0x10001010101, 0x10001010101, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001010000, 0x1010001010000, 0x10001010000, 0x10001010000, 0x101010001010000, 0x1010001010000, 0x10001010000, 0x10001010000, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001010100, 0x1010001010100, 0x10001010100, 0x10001010100, 0x101010001010100, 0x1010001010100, 0x10001010100, 0x10001010100, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001010000, 0x1010001010000, 0x10001010000, 0x10001010000, 0x101010001010000, 0x1010001010000, 0x10001010000, 0x10001010000, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000, 0x101010001000000, 0x1010001000000, 0x10001000000, 0x10001000000},
    {0x101000101010101, 0x1000101010101, 0x101000101010101, 0x1000101010101, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101000000, 0x1000101000000, 0x101000101000000, 0x1000101000000, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101010000, 0x1000101010000, 0x101000101010000, 0x1000101010000, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101000000, 0x1000101000000, 0x101000101000000, 0x1000101000000, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101010100, 0x1000101010100, 0x101000101010100, 0x1000101010100, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101000000, 0x1000101000000, 0x101000101000000, 0x1000101000000, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101010000, 0x1000101010000, 0x101000101010000, 0x1000101010000, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000, 0x101000101000000, 0x1000101000000, 0x101000101000000, 0x1000101000000, 0x101000100000000, 0x1000100000000, 0x101000100000000, 0x1000100000000},
    {0x100010101010101, 0x100010101010101, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101000000, 0x100010101000000, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101010000, 0x100010101010000, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101000000, 0x100010101000000, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101010100, 0x100010101010100, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101000000, 0x100010101000000, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101010000, 0x100010101010000, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000, 0x100010101000000, 0x100010101000000, 0x100010000000000, 0x100010000000000, 0x100010100000000, 0x100010100000000, 0x100010000000000, 0x100010000000000},
    {0x1010101010101, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101010000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101010100, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101010000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010101000000, 0x1000000000000, 0x1010000000000, 0x1000000000000, 0x1010100000000, 0x1000000000000, 0x1010000000000, 0x1000000000000}
};

static const U64 FILLUP_ATTACK_BBS[8][64] = {
    {0xFEFEFEFEFEFEFEFE, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x1E1E1E1E1E1E1E1E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x3E3E3E3E3E3E3E3E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x1E1E1E1E1E1E1E1E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x7E7E7E7E7E7E7E7E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x1E1E1E1E1E1E1E1E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x3E3E3E3E3E3E3E3E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0x1E1E1E1E1E1E1E1E, 0x202020202020202, 0x606060606060606, 0x202020202020202, 0xE0E0E0E0E0E0E0E, 0x202020202020202, 0x606060606060606, 0x202020202020202},
    {0xFDFDFDFDFDFDFDFD, 0xFDFDFDFDFDFDFDFD, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x1D1D1D1D1D1D1D1D, 0x1D1D1D1D1D1D1D1D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x3D3D3D3D3D3D3D3D, 0x3D3D3D3D3D3D3D3D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x1D1D1D1D1D1D1D1D, 0x1D1D1D1D1D1D1D1D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x7D7D7D7D7D7D7D7D, 0x7D7D7D7D7D7D7D7D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x1D1D1D1D1D1D1D1D, 0x1D1D1D1D1D1D1D1D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x3D3D3D3D3D3D3D3D, 0x3D3D3D3D3D3D3D3D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505, 0x1D1D1D1D1D1D1D1D, 0x1D1D1D1D1D1D1D1D, 0x505050505050505, 0x505050505050505, 0xD0D0D0D0D0D0D0D, 0xD0D0D0D0D0D0D0D, 0x505050505050505, 0x505050505050505},
    {0xFBFBFBFBFBFBFBFB, 0xFAFAFAFAFAFAFAFA, 0xFBFBFBFBFBFBFBFB, 0xFAFAFAFAFAFAFAFA, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x3B3B3B3B3B3B3B3B, 0x3A3A3A3A3A3A3A3A, 0x3B3B3B3B3B3B3B3B, 0x3A3A3A3A3A3A3A3A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x7B7B7B7B7B7B7B7B, 0x7A7A7A7A7A7A7A7A, 0x7B7B7B7B7B7B7B7B, 0x7A7A7A7A7A7A7A7A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x3B3B3B3B3B3B3B3B, 0x3A3A3A3A3A3A3A3A, 0x3B3B3B3B3B3B3B3B, 0x3A3A3A3A3A3A3A3A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0x1B1B1B1B1B1B1B1B, 0x1A1A1A1A1A1A1A1A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A, 0xB0B0B0B0B0B0B0B, 0xA0A0A0A0A0A0A0A},
    {0xF7F7F7F7F7F7F7F7, 0xF6F6F6F6F6F6F6F6, 0xF4F4F4F4F4F4F4F4, 0xF4F4F4F4F4F4F4F4, 0xF7F7F7F7F7F7F7F7, 0xF6F6F6F6F6F6F6F6, 0xF4F4F4F4F4F4F4F4, 0xF4F4F4F4F4F4F4F4, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x3737373737373737, 0x3636363636363636, 0x3434343434343434, 0x3434343434343434, 0x3737373737373737, 0x3636363636363636, 0x3434343434343434, 0x3434343434343434, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x7777777777777777, 0x7676767676767676, 0x7474747474747474, 0x7474747474747474, 0x7777777777777777, 0x7676767676767676, 0x7474747474747474, 0x7474747474747474, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x3737373737373737, 0x3636363636363636, 0x3434343434343434, 0x3434343434343434, 0x3737373737373737, 0x3636363636363636, 0x3434343434343434, 0x3434343434343434, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414, 0x1717171717171717, 0x1616161616161616, 0x1414141414141414, 0x1414141414141414},
    {0xEFEFEFEFEFEFEFEF, 0xEEEEEEEEEEEEEEEE, 0xECECECECECECECEC, 0xECECECECECECECEC, 0xE8E8E8E8E8E8E8E8, 0xE8E8E8E8E8E8E8E8, 0xE8E8E8E8E8E8E8E8, 0xE8E8E8E8E8E8E8E8, 0xEFEFEFEFEFEFEFEF, 0xEEEEEEEEEEEEEEEE, 0xECECECECECECECEC, 0xECECECECECECECEC, 0xE8E8E8E8E8E8E8E8, 0xE8E8E8E8E8E8E8E8, 0xE8E8E8E8E8E8E8E8, 0xE8E8E8E8E8E8E8E8, 0x2F2F2F2F2F2F2F2F, 0x2E2E2E2E2E2E2E2E, 0x2C2C2C2C2C2C2C2C, 0x2C2C2C2C2C2C2C2C, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x2F2F2F2F2F2F2F2F, 0x2E2E2E2E2E2E2E2E, 0x2C2C2C2C2C2C2C2C, 0x2C2C2C2C2C2C2C2C, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x6F6F6F6F6F6F6F6F, 0x6E6E6E6E6E6E6E6E, 0x6C6C6C6C6C6C6C6C, 0x6C6C6C6C6C6C6C6C, 0x6868686868686868, 0x6868686868686868, 0x6868686868686868, 0x6868686868686868, 0x6F6F6F6F6F6F6F6F, 0x6E6E6E6E6E6E6E6E, 0x6C6C6C6C6C6C6C6C, 0x6C6C6C6C6C6C6C6C, 0x6868686868686868, 0x6868686868686868, 0x6868686868686868, 0x6868686868686868, 0x2F2F2F2F2F2F2F2F, 0x2E2E2E2E2E2E2E2E, 0x2C2C2C2C2C2C2C2C, 0x2C2C2C2C2C2C2C2C, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x2F2F2F2F2F2F2F2F, 0x2E2E2E2E2E2E2E2E, 0x2C2C2C2C2C2C2C2C, 0x2C2C2C2C2C2C2C2C, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828, 0x2828282828282828},
    {0xDFDFDFDFDFDFDFDF, 0xDEDEDEDEDEDEDEDE, 0xDCDCDCDCDCDCDCDC, 0xDCDCDCDCDCDCDCDC, 0xD8D8D8D8D8D8D8D8, 0xD8D8D8D8D8D8D8D8, 0xD8D8D8D8D8D8D8D8, 0xD8D8D8D8D8D8D8D8, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xDFDFDFDFDFDFDFDF, 0xDEDEDEDEDEDEDEDE, 0xDCDCDCDCDCDCDCDC, 0xDCDCDCDCDCDCDCDC, 0xD8D8D8D8D8D8D8D8, 0xD8D8D8D8D8D8D8D8, 0xD8D8D8D8D8D8D8D8, 0xD8D8D8D8D8D8D8D8, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0xD0D0D0D0D0D0D0D0, 0x5F5F5F5F5F5F5F5F, 0x5E5E5E5E5E5E5E5E, 0x5C5C5C5C5C5C5C5C, 0x5C5C5C5C5C5C5C5C, 0x5858585858585858, 0x5858585858585858, 0x5858585858585858, 0x5858585858585858, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5F5F5F5F5F5F5F5F, 0x5E5E5E5E5E5E5E5E, 0x5C5C5C5C5C5C5C5C, 0x5C5C5C5C5C5C5C5C, 0x5858585858585858, 0x5858585858585858, 0x5858585858585858, 0x5858585858585858, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050, 0x5050505050505050},
    {0xBFBFBFBFBFBFBFBF, 0xBEBEBEBEBEBEBEBE, 0xBCBCBCBCBCBCBCBC, 0xBCBCBCBCBCBCBCBC, 0xB8B8B8B8B8B8B8B8, 0xB8B8B8B8B8B8B8B8, 0xB8B8B8B8B8B8B8B8, 0xB8B8B8B8B8B8B8B8, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xBFBFBFBFBFBFBFBF, 0xBEBEBEBEBEBEBEBE, 0xBCBCBCBCBCBCBCBC, 0xBCBCBCBCBCBCBCBC, 0xB8B8B8B8B8B8B8B8, 0xB8B8B8B8B8B8B8B8, 0xB8B8B8B8B8B8B8B8, 0xB8B8B8B8B8B8B8B8, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xB0B0B0B0B0B0B0B0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0, 0xA0A0A0A0A0A0A0A0},
    {0x7F7F7F7F7F7F7F7F, 0x7E7E7E7E7E7E7E7E, 0x7C7C7C7C7C7C7C7C, 0x7C7C7C7C7C7C7C7C, 0x7878787878787878, 0x7878787878787878, 0x7878787878787878, 0x7878787878787878, 0x7070707070707070, 0x7070707070707070, 0x7070707070707070, 0x7070707070707070, 0x7070707070707070, 0x7070707070707070, 0x7070707070707070, 0x7070707070707070, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x6060606060606060, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040, 0x4040404040404040}
};


static const U64 DIAG_ATTACK_BBS[8][64] = {
    {0x8040201008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x1008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x201008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x1008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x40201008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x1008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x201008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200, 0x1008040200, 0x200, 0x40200, 0x200, 0x8040200, 0x200, 0x40200, 0x200},
    {0x8040201008040001, 0x8040201008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x1008040001, 0x1008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x201008040001, 0x201008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x1008040001, 0x1008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x40201008040001, 0x40201008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x1008040001, 0x1008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x201008040001, 0x201008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001, 0x1008040001, 0x1008040001, 0x40001, 0x40001, 0x8040001, 0x8040001, 0x40001, 0x40001},
    {0x8040201008000201, 0x8040201008000200, 0x8040201008000201, 0x8040201008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x1008000201, 0x1008000200, 0x1008000201, 0x1008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x201008000201, 0x201008000200, 0x201008000201, 0x201008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x1008000201, 0x1008000200, 0x1008000201, 0x1008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x40201008000201, 0x40201008000200, 0x40201008000201, 0x40201008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x1008000201, 0x1008000200, 0x1008000201, 0x1008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x201008000201, 0x201008000200, 0x201008000201, 0x201008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200, 0x1008000201, 0x1008000200, 0x1008000201, 0x1008000200, 0x8000201, 0x8000200, 0x8000201, 0x8000200},
    {0x8040201000040201, 0x8040201000040200, 0x8040201000040000, 0x8040201000040000, 0x8040201000040201, 0x8040201000040200, 0x8040201000040000, 0x8040201000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x201000040201, 0x201000040200, 0x201000040000, 0x201000040000, 0x201000040201, 0x201000040200, 0x201000040000, 0x201000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x40201000040201, 0x40201000040200, 0x40201000040000, 0x40201000040000, 0x40201000040201, 0x40201000040200, 0x40201000040000, 0x40201000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x201000040201, 0x201000040200, 0x201000040000, 0x201000040000, 0x201000040201, 0x201000040200, 0x201000040000, 0x201000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000, 0x1000040201, 0x1000040200, 0x1000040000, 0x1000040000},
    {0x8040200008040201, 0x8040200008040200, 0x8040200008040000, 0x8040200008040000, 0x8040200008000000, 0x8040200008000000, 0x8040200008000000, 0x8040200008000000, 0x8040200008040201, 0x8040200008040200, 0x8040200008040000, 0x8040200008040000, 0x8040200008000000, 0x8040200008000000, 0x8040200008000000, 0x8040200008000000, 0x200008040201, 0x200008040200, 0x200008040000, 0x200008040000, 0x200008000000, 0x200008000000, 0x200008000000, 0x200008000000, 0x200008040201, 0x200008040200, 0x200008040000, 0x200008040000, 0x200008000000, 0x200008000000, 0x200008000000, 0x200008000000, 0x40200008040201, 0x40200008040200, 0x40200008040000, 0x40200008040000, 0x40200008000000, 0x40200008000000, 0x40200008000000, 0x40200008000000, 0x40200008040201, 0x40200008040200, 0x40200008040000, 0x40200008040000, 0x40200008000000, 0x40200008000000, 0x40200008000000, 0x40200008000000, 0x200008040201, 0x200008040200, 0x200008040000, 0x200008040000, 0x200008000000, 0x200008000000, 0x200008000000, 0x200008000000, 0x200008040201, 0x200008040200, 0x200008040000, 0x200008040000, 0x200008000000, 0x200008000000, 0x200008000000, 0x200008000000},
    {0x8040001008040201, 0x8040001008040200, 0x8040001008040000, 0x8040001008040000, 0x8040001008000000, 0x8040001008000000, 0x8040001008000000, 0x8040001008000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001008040201, 0x8040001008040200, 0x8040001008040000, 0x8040001008040000, 0x8040001008000000, 0x8040001008000000, 0x8040001008000000, 0x8040001008000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x8040001000000000, 0x40001008040201, 0x40001008040200, 0x40001008040000, 0x40001008040000, 0x40001008000000, 0x40001008000000, 0x40001008000000, 0x40001008000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001008040201, 0x40001008040200, 0x40001008040000, 0x40001008040000, 0x40001008000000, 0x40001008000000, 0x40001008000000, 0x40001008000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000, 0x40001000000000},
    {0x8000201008040201, 0x8000201008040200, 0x8000201008040000, 0x8000201008040000, 0x8000201008000000, 0x8000201008000000, 0x8000201008000000, 0x8000201008000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000201008040201, 0x8000201008040200, 0x8000201008040000, 0x8000201008040000, 0x8000201008000000, 0x8000201008000000, 0x8000201008000000, 0x8000201008000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000201000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000, 0x8000200000000000},
    {0x40201008040201, 0x40201008040200, 0x40201008040000, 0x40201008040000, 0x40201008000000, 0x40201008000000, 0x40201008000000, 0x40201008000000, 0x40201000000000, 0x40201000000000, 0x40201000000000, 0x40201000000000, 0x40201000000000, 0x40201000000000, 0x40201000000000, 0x40201000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40200000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000, 0x40000000000000}
};


static const U64 BOARDS_BY_INDEX[64] = {
    0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
    0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,
    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,
    0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000,
    0x100000000, 0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000,
    0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000,
    0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000,
    0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
};



/*
 * Bitscan & popcount
 */
const U32 index64[64] = {
    0, 47,  1, 56, 48, 27,  2, 60,
   57, 49, 41, 37, 28, 16,  3, 61,
   54, 58, 35, 52, 50, 42, 21, 44,
   38, 32, 29, 23, 17, 11,  4, 62,
   46, 55, 26, 59, 40, 36, 15, 53,
   34, 51, 20, 43, 31, 22, 10, 45,
   25, 39, 14, 33, 19, 30,  9, 24,
   13, 18,  8, 12,  7,  6,  5, 63
};
#define DEBRUIJN64 0x03f79d71b4cb0a89ULL

/**
 * bitScanForward
 * @author Kim Walisch (2012)
 * @param bb bitboard to scan
 * @precondition bb != 0
 * @return index (0..63) of least significant one bit
 */
inline
U32 bitscanfwd(U64 bb) {
   return index64[((bb ^ (bb-1)) * DEBRUIJN64) >> 58];
}




#endif // BB_DEFINITIONS_HPP
